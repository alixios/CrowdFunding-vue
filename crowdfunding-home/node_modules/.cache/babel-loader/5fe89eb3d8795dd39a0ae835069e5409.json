{"ast":null,"code":"var SEPARATION = 100,\n    AMOUNTX = 60,\n    AMOUNTY = 40;\nvar container;\nvar camera, scene, renderer;\nvar particles,\n    particle,\n    count = 0;\nvar mouseX = 0,\n    mouseY = 0;\nvar windowHalfX = window.innerWidth / 2;\nvar windowHalfY = window.innerHeight / 2; //初始化\n\nfunction init() {\n  container = document.createElement('div'); //创建容器\n\n  document.body.appendChild(container); //将容器添加到页面上\n\n  camera = new THREE.PerspectiveCamera(120, window.innerWidth / window.innerHeight, 1, 1500); //创建透视相机设置相机角度大小等\n\n  camera.position.set(0, 450, 2000); //设置相机位置\n\n  scene = new THREE.Scene(); //创建场景\n\n  particles = new Array();\n  var PI2 = Math.PI * 2; //设置粒子的大小，颜色位置等\n\n  var material = new THREE.ParticleCanvasMaterial({\n    color: 0x0f96ff,\n    vertexColors: true,\n    size: 4,\n    program: function (context) {\n      context.beginPath();\n      context.arc(0, 0, 0.01, 0, PI2, true); //画一个圆形。此处可修改大小。\n\n      context.fill();\n    }\n  }); //设置长条粒子的大小颜色长度等\n\n  var materialY = new THREE.ParticleCanvasMaterial({\n    color: 0xffffff,\n    vertexColors: true,\n    size: 1,\n    program: function (context) {\n      context.beginPath(); //绘制渐变色的矩形\n\n      var lGrd = context.createLinearGradient(-0.008, 0.25, 0.016, -0.25);\n      lGrd.addColorStop(0, '#16eff7');\n      lGrd.addColorStop(1, '#0090ff');\n      context.fillStyle = lGrd;\n      context.fillRect(-0.008, 0.25, 0.016, -0.25); //注意此处的坐标大小\n      //绘制底部和顶部圆圈\n\n      context.fillStyle = \"#0090ff\";\n      context.arc(0, 0, 0.008, 0, PI2, true); //绘制底部圆圈\n\n      context.fillStyle = \"#16eff7\";\n      context.arc(0, 0.25, 0.008, 0, PI2, true); //绘制顶部圆圈\n\n      context.fill();\n      context.closePath(); //绘制顶部渐变色光圈\n\n      var rGrd = context.createRadialGradient(0, 0.25, 0, 0, 0.25, 0.025);\n      rGrd.addColorStop(0, 'transparent');\n      rGrd.addColorStop(1, '#16eff7');\n      context.fillStyle = rGrd;\n      context.arc(0, 0.25, 0.025, 0, PI2, true); //绘制一个圆圈\n\n      context.fill();\n    }\n  }); //循环判断创建随机数选择创建粒子或者粒子条\n\n  var i = 0;\n\n  for (var ix = 0; ix < AMOUNTX; ix++) {\n    for (var iy = 0; iy < AMOUNTY; iy++) {\n      var num = Math.random() - 0.1;\n\n      if (num > 0) {\n        particle = particles[i++] = new THREE.Particle(material);\n        console.log(\"material\");\n      } else {\n        particle = particles[i++] = new THREE.Particle(materialY);\n        console.log(\"materialY\");\n      } //particle = particles[ i ++ ] = new THREE.Particle( material );\n\n\n      particle.position.x = ix * SEPARATION - AMOUNTX * SEPARATION / 2;\n      particle.position.z = iy * SEPARATION - AMOUNTY * SEPARATION / 2;\n      scene.add(particle);\n    }\n  }\n\n  renderer = new THREE.CanvasRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.appendChild(renderer.domElement); //document.addEventListener( 'mousemove', onDocumentMouseMove, false );\n  //document.addEventListener( 'touchstart', onDocumentTouchStart, false );\n  //document.addEventListener( 'touchmove', onDocumentTouchMove, false );\n\n  window.addEventListener('resize', onWindowResize, false);\n} //浏览器大小改变时重新渲染\n\n\nfunction onWindowResize() {\n  windowHalfX = window.innerWidth / 2;\n  windowHalfY = window.innerHeight / 2;\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n} //将相机和场景渲染到页面上\n\n\nfunction render() {\n  var i = 0; //更新粒子的位置和大小\n\n  for (var ix = 0; ix < AMOUNTX; ix++) {\n    for (var iy = 0; iy < AMOUNTY; iy++) {\n      particle = particles[i++]; //更新粒子位置\n\n      particle.position.y = Math.sin((ix + count) * 0.3) * 50 + Math.sin((iy + count) * 0.5) * 50; //更新粒子大小\n\n      particle.scale.x = particle.scale.y = particle.scale.z = ((Math.sin((ix + count) * 0.3) + 1) * 4 + (Math.sin((iy + count) * 0.5) + 1) * 4) * 50; //正常情况下再放大100倍*1200\n    }\n  }\n\n  renderer.render(scene, camera);\n  count += 0.1;\n}","map":null,"metadata":{},"sourceType":"script"}